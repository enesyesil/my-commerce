{"version":3,"file":"cartController.js","sourceRoot":"","sources":["../../src/controllers/cartController.ts"],"names":[],"mappings":"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","sourcesContent":["import prisma from '../prisma/prismaClient';\n\n// Add to Cart\nexport const addToCart = async (req, res) => {\n  const { userId, productId, quantity } = req.body;\n\n  // Ensure the authenticated user is modifying their own cart\n  if (req.user.id !== userId) {\n    return res.status(403).json({ message: 'You are not authorized to modify this cart.' });\n  }\n\n  try {\n    const existingCartItem = await prisma.cart.findFirst({\n      where: { userId, productId },\n    });\n\n    if (existingCartItem) {\n      const updatedCartItem = await prisma.cart.update({\n        where: { id: existingCartItem.id },\n        data: { quantity: existingCartItem.quantity + quantity },\n      });\n      return res.status(200).json(updatedCartItem);\n    }\n\n    const newCartItem = await prisma.cart.create({\n      data: { userId, productId, quantity },\n    });\n\n    res.status(201).json(newCartItem);\n  } catch (error) {\n    res.status(500).json({ message: 'Internal server error' });\n  }\n};\n\n// Get Cart\nexport const getCart = async (req, res) => {\n  const { userId } = req.query;\n\n  // Ensure the authenticated user is accessing their own cart\n  if (req.user.id !== Number(userId)) {\n    return res.status(403).json({ message: 'You are not authorized to access this cart.' });\n  }\n\n  try {\n    const cartItems = await prisma.cart.findMany({\n      where: { userId: Number(userId) },\n      include: { product: true },\n    });\n\n    if (cartItems.length === 0) {\n      return res.status(404).json({ message: 'Cart is empty.' });\n    }\n\n    const total = cartItems.reduce((sum, item) => sum + item.quantity * item.product.price, 0);\n\n    res.status(200).json({ items: cartItems, total });\n  } catch (error) {\n    res.status(500).json({ message: 'Internal server error' });\n  }\n};\n\n// Clear Cart\nexport const clearCart = async (req, res) => {\n  const { userId } = req.query;\n\n  // Ensure the authenticated user is clearing their own cart\n  if (req.user.id !== Number(userId)) {\n    return res.status(403).json({ message: 'You are not authorized to clear this cart.' });\n  }\n\n  try {\n    await prisma.cart.deleteMany({\n      where: { userId: Number(userId) },\n    });\n    res.status(200).json({ message: 'Cart cleared successfully.' });\n  } catch (error) {\n    res.status(500).json({ message: 'Internal server error' });\n  }\n};\n"]}