{"version":3,"file":"cartController.js","sourceRoot":"","sources":["../../src/controllers/cartController.ts"],"names":[],"mappings":";;;;;;AAAA,0EAA4C;AAErC,MAAM,SAAS,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IAC1C,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,CAAC;IAEjD,IAAI,CAAC;QACH,MAAM,gBAAgB,GAAG,MAAM,sBAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACnD,KAAK,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE;SAC7B,CAAC,CAAC;QAEH,IAAI,gBAAgB,EAAE,CAAC;YACrB,MAAM,eAAe,GAAG,MAAM,sBAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAC/C,KAAK,EAAE,EAAE,EAAE,EAAE,gBAAgB,CAAC,EAAE,EAAE;gBAClC,IAAI,EAAE,EAAE,QAAQ,EAAE,gBAAgB,CAAC,QAAQ,GAAG,QAAQ,EAAE;aACzD,CAAC,CAAC;YACH,OAAO,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACnC,CAAC;QAED,MAAM,WAAW,GAAG,MAAM,sBAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC3C,IAAI,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,QAAQ,EAAE;SACtC,CAAC,CAAC;QAEH,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACxB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAC7D,CAAC;AACH,CAAC,CAAC;AAxBW,QAAA,SAAS,aAwBpB;AAEK,MAAM,OAAO,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE;IACxC,MAAM,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,KAAK,CAAC;IAE7B,IAAI,CAAC;QACH,MAAM,SAAS,GAAG,MAAM,sBAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YAC3C,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE;YACjC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE;SAC3B,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC;IAC7D,CAAC;AACH,CAAC,CAAC;AAZW,QAAA,OAAO,WAYlB","sourcesContent":["import prisma from '../prisma/prismaClient';\n\nexport const addToCart = async (req, res) => {\n  const { userId, productId, quantity } = req.body;\n\n  try {\n    const existingCartItem = await prisma.cart.findFirst({\n      where: { userId, productId },\n    });\n\n    if (existingCartItem) {\n      const updatedCartItem = await prisma.cart.update({\n        where: { id: existingCartItem.id },\n        data: { quantity: existingCartItem.quantity + quantity },\n      });\n      return res.json(updatedCartItem);\n    }\n\n    const newCartItem = await prisma.cart.create({\n      data: { userId, productId, quantity },\n    });\n\n    res.json(newCartItem);\n  } catch (error) {\n    res.status(500).json({ message: 'Internal server error' });\n  }\n};\n\nexport const getCart = async (req, res) => {\n  const { userId } = req.query;\n\n  try {\n    const cartItems = await prisma.cart.findMany({\n      where: { userId: Number(userId) },\n      include: { product: true },\n    });\n    res.json(cartItems);\n  } catch (error) {\n    res.status(500).json({ message: 'Internal server error' });\n  }\n};\n"]}